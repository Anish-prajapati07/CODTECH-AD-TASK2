import requests
from bs4 import BeautifulSoup
import re

class WebVulnerabilityScanner:
    def __init__(self, base_url):
        self.base_url = base_url
        self.session = requests.Session()

    def scan_for_sql_injection(self, test_url):
        """
        Check if the URL is vulnerable to SQL injection by injecting common payloads.
        """
        sql_payloads = ["' OR '1'='1", "' OR '1'='1' --", """' OR '1'='1"""]
        for payload in sql_payloads:
            vulnerable_url = f"{test_url}?q={payload}"
            response = self.session.get(vulnerable_url)
            if "SQL syntax" in response.text or "mysql_fetch" in response.text:
                print(f"[!] SQL Injection vulnerability found at: {vulnerable_url}")
                return True
        return False

    def scan_for_xss(self, test_url):
        """
        Check if the URL is vulnerable to Cross-Site Scripting (XSS) by injecting a basic script payload.
        """
        xss_payload = "<script>alert('XSS')</script>"
        vulnerable_url = f"{test_url}?q={xss_payload}"
        response = self.session.get(vulnerable_url)
        if xss_payload in response.text:
            print(f"[!] XSS vulnerability found at: {vulnerable_url}")
            return True
        return False

    def extract_forms(self, html_content):
        """
        Extract forms from HTML content and return their details.
        """
        soup = BeautifulSoup(html_content, 'html.parser')
        forms = soup.find_all('form')
        return forms

    def scan_forms_for_xss(self, forms, action_url):
        """
        Test form inputs for XSS vulnerabilities.
        """
        xss_payload = "<script>alert('XSS')</script>"
        for form in forms:
            form_action = form.get('action') or action_url
            method = form.get('method', 'get').lower()
            inputs = form.find_all('input')
            data = {}
            for inp in inputs:
                if inp.get('name'):
                    data[inp['name']] = xss_payload

            if method == 'post':
                response = self.session.post(form_action, data=data)
            else:
                response = self.session.get(form_action, params=data)

            if xss_payload in response.text:
                print(f"[!] XSS vulnerability found in form at: {form_action}")
                return True
        return False

    def start_scan(self):
        """
        Begin scanning the base URL for vulnerabilities.
        """
        print(f"Scanning {self.base_url}...")
        response = self.session.get(self.base_url)

        if response.status_code == 200:
            # Check for vulnerabilities in GET requests
            self.scan_for_sql_injection(self.base_url)
            self.scan_for_xss(self.base_url)

            # Extract and test forms for XSS vulnerabilities
            forms = self.extract_forms(response.text)
            if forms:
                print(f"[+] Found {len(forms)} form(s) on the page.")
                self.scan_forms_for_xss(forms, self.base_url)
            else:
                print("[-] No forms found on the page.")
        else:
            print(f"Failed to connect to {self.base_url}. HTTP Status: {response.status_code}")

if __name__ == "__main__":
    target_url = input("Enter the URL to scan: ").strip()
    scanner = WebVulnerabilityScanner(target_url)
    scanner.start_scan()

